---
description: 
globs: 
alwaysApply: true
---
# Go Development Guidelines (AI-Readable)

## 1. Core Principles & Practices
    - **Interfaces:**
        - Define per consumer needs (Interface Segregation Principle).
        - Create only when necessary (polymorphism, testing, decoupling). AVOID premature/excessive interface creation.
    - **Auto-generated Files:** DO NOT EDIT files with "DO NOT EDIT" comments (no Go rules, formatting, refactoring).
    - **Service Package Structure:**
        - `handler`: API/request handling.
        - `service`: Business logic.
        - `storage`: Data persistence.
        - `model`: Core data structures (if not co-located/generated).
    - **Logging:** USE `slog` for structured logging. AVOID `log` package for application logging.
    - **Error Handling:** Wrap ALL returned errors with context: `fmt.Errorf("context: %w", err)`.
    - **Concurrency:** USE `errgroup` (`golang.org/x/sync/errgroup`) for managing concurrent goroutines.

## 2. Recommended Libraries & Tools
    - **Configuration:** `env` (`github.com/caarlos0/env`).
    - **HTTP Routing:** `Chi` (`github.com/go-chi/chi`).
    - **Database (SQLC):**
        - USE `SQLC` (`docs.sqlc.dev`) for type-safe Go code from SQL.
        - Schema Source (with `golang-migrate`): Configure `SQLC` to read from `golang-migrate` dir. Ensure lexicographical migration filenames (zero-padded).
    - **DB Migrations:** `golang-migrate` (`github.com/golang-migrate/migrate`).
    - **Event-Driven:** `Watermill` (`watermill.io/`).

## 3. Development Methodology
    - **Test-Driven Development (TDD):**
        1. Create minimal stub.
        2. Write failing unit test.
        3. Implement logic to pass test.
        - NOTE: TDD validates intended functionality from start.
    - **Codebase Verification**: BEFORE creating new components/logic, CHECK existing codebase for leverage/extension opportunities. (Prevents redundancy, leaner code).

## 4. Testing Strategy
    - **Categorization & Tags:**
        - **Unit Tests:**
            - Test components in ISOLATION.
            - MOCK/STUB ALL external dependencies (DB, APIs, services).
            - USE `testify/assert` or `testify/require` for assertions.
            - USE `testify/mock` for mocks.
            - REQUIREMENTS: Must be FAST. NO Docker/external services.
        - **E2E/Integration Tests (`//go:build e2e`):**
            - Test system behavior (whole/integrated parts).
            - STYLE: BDD (see `github.com/bmcszk/effective-monorepo/tree/feature/tilt/e2e` for non-Godog examples).
            - 3rd Party REST Mocking (E2E): USE `unimock` (`github.com/bmcszk/unimock`).
            - REQUIREMENTS: Running app & dependencies (e.g., Docker Compose).
    - **Execution:** Unit and E2E tests MUST be runnable via dedicated Makefile targets (e.g., `make test-unit`, `make test-e2e`).
    - **Function Visibility & Test Coverage:**
        - If function visibility changes (public -> private), reassess need for its dedicated unit tests.
        - Private functions often tested indirectly via public API.
        - ENSURE core logic remains well-tested (even if indirectly). Confirm sufficient indirect coverage.

## 5. Code Quality & Workflow
    - **Pre-commit Checks (`make check`):**
        - MANDATORY: A single Makefile target (e.g., `make check`) MUST verify Go code quality BEFORE commits.
        - `make check` MUST INCLUDE:
            - `go build ./...`
            - `golangci-lint run`
            - Unit tests (e.g., `make test-unit` or `go test -tags=unit ./...`)
        - REQUIREMENTS: `make check` MUST NOT require Docker or external services.
