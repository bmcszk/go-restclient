---
description: 
globs: 
alwaysApply: true
---
# Task Workflow (AI-Readable)

Manages task creation, management, and completion for the project.

## 1. Task Creation & Management (`docs/tasks.md`)
    - **A. On Requirement Change (`docs/requirements.md` update):**
        1. CREATE a set of new tasks in **ToDo** state.
        2. APPEND these new tasks to end of `docs/tasks.md`.
        3. If new requirement is functional: ADD test scenarios to `docs/test_scenarios.md`; CREATE task to implement unit tests for EVERY scenario.
    - **B. Updating `docs/tasks.md`:**
        1. When new tasks are appended (per 1.A.2), REMOVE ALL tasks with **Done** status from `docs/tasks.md` in the SAME documentation update.
        2. If NO new tasks added, "Done" tasks REMAIN until next task creation cycle.
    - **C. AI Responsibility:** AI Agent ALWAYS creates and manages tasks (IDs, status tracking in `docs/tasks.md`).

## 2. AI Assistant: Task Processing Workflow
    - **A. Task Selection (`docs/tasks.md`):**
        1. PRIORITY 1: First task in **ToDo** state.
        2. PRIORITY 2 (if no ToDo): First task in **Blocked** state.
        3. If task is **Blocked**: SKIP, move to next available **ToDo**. Return to **Blocked** tasks at end OR when unblocked.
    - **B. Update Task Status:** BEFORE starting work, AI MUST update task status to **In Progress** in `docs/tasks.md`.
    - **C. Task Execution:**
        1. Perform changes (USE TDD if possible).
        2. ENSURE relevant docs (`docs/requirements.md`, `docs/test_scenarios.md`, `docs/tasks.md`, `docs/decisions.md`, `README.md`, `docs/project_structure.md`, `docs/learnings.md`) are considered & UPDATED if necessary.
        3. PROACTIVELY suggest/perform checks (compile, lint, test) during task development.
    - **D. Task Completion & Status Management:**
        - **Definition of "Completed" Task:**
            1. Code changes: DONE.
            2. Functional requirements: MET.
            3. Relevant test scenarios from `docs/test_scenarios.md`: COVERED by unit tests (if applicable).
            4. `make check` (entire project: build, lint, all unit tests): MUST BE PASSING.
                - A task is NOT Done if `make check` fails.
                - TRUST `make check` results: Test failure implies underlying code issue.
                - DO NOT mark tasks Done prematurely if correctness tied to failing tests.
        - **Status Update (on Completion):** If task is **Done**, AI updates status in `docs/tasks.md`.
        - **Status Update (Interruption/Reversion):** If work stopped OR "Done" work reverted (failed checks, changed reqs), status MUST be updated to **ToDo** (can resume later) or **Blocked** (dependencies prevent work).
    - **E. Post-Task Completion (Successful Commit & Push):**
        1. IMMEDIATELY start next **ToDo** task from `docs/tasks.md` (if any), following same workflow.
        2. If AI knows next step (incl. new task), PROCEED WITHOUT user confirmation.

## 3. Task Completion & Version Control
    - **A. Conditions for Marking Task "Done":**
        1. Functional requirements met.
        2. Relevant test scenarios (`docs/test_scenarios.md`) covered by unit tests.
        3. CRITICAL: `make check` for ENTIRE project PASSES.
    - **B. Actions When Task is "Done":**
        1. Staging: AI MUST ensure ALL changed/new files for task are STAGED for commit (e.g., via tool calls).
        2. Commit: AI MUST propose Git commit.
            - Message Convention: `[TASK-ID] Short descriptive title` (e.g., `[TASK-109] Add unit tests for StockPriceWorker`).
            - CONDITION: Committing ONLY ALLOWED if `make check` PASSES.
        3. Push: After successful commit, AI MUST propose Git push to current branch.
    - **C. Pushing Other Work:**
        - Push other working changes (even if task not fully **Done**) to remote frequently.
        - CONDITION: ONLY AFTER ensuring they pass `make check` AND are committed.
        - Applies esp. to AI work on feature/fix branch (per `requirement_workflow.mdc`).
