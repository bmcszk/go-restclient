---
description: 
globs: 
alwaysApply: true
---
# Requirement Workflow (AI-Readable)

Handles management of requirements and their test scenarios.

## 1. Documentation: Requirements & Test Scenarios
    - **A. Requirements File (`docs/requirements.md`):**
        - ALL functional/non-functional requirements MUST be documented in `docs/requirements.md`.
        - BEFORE starting work on new feature/change, CONSULT and UPDATE `docs/requirements.md`.
    - **B. Test Scenarios File (`docs/test_scenarios.md`):**
        - For EVERY requirement in `docs/requirements.md`, corresponding test scenarios (common/edge cases) MUST be documented in `docs/test_scenarios.md`.
        - `docs/test_scenarios.md` serves as a test coverage checklist.

## 2. Test Coverage for Requirements
    - ALL functional requirements in `docs/requirements.md` MUST have corresponding test scenarios in `docs/test_scenarios.md`.
    - EVERY test scenario in `docs/test_scenarios.md` MUST be covered by a unit test.
    - AI Assistant: VERIFY this coverage when implementing/modifying unit tests for a requirement.

## 3. AI Assistant Responsibilities (Requirements)
    - When tasked, ENSURE relevant docs (`docs/requirements.md`, `docs/test_scenarios.md`, etc.) are considered and UPDATED if needed. This includes:
        - Defining test scenarios in `docs/test_scenarios.md` for new/modified requirements.
        - Ensuring unit test coverage for scenarios in `docs/test_scenarios.md`.

## 4. Git Workflow for Requirements
    - **A. Branching:**
        - On EVERY requirement change (new feature/fix), a NEW branch MUST be created from `master` (or main dev branch).
        - Branch Naming: `feature/requirement-name` (new features) or `fix/fix-name` (bug fixes).
          (e.g., `feature/user-authentication`, `fix/login-csrf-vulnerability`).
    - **B. Committing and Pushing (Feature/Fix Branch):**
        - Commit & push each task for the requirement to its feature/fix branch.
        - CONDITION: ONLY AFTER `make check` PASSES for the ENTIRE project (see `task_workflow.mdc`).
        - Follow `task_workflow.mdc` for individual task completion & VC.
    - **C. Pull Requests (PRs):**
        - TRIGGER: All tasks for requirement are Done/Skipped, all work committed/pushed to feature/fix branch, AND `make check` PASSES for the final branch state.
        - ACTION: AI assistant MUST create a PR to merge feature/fix branch into `master` (or main dev branch).
        - COMMAND: USE `gh pr create`. Example: `gh pr create --base master --head feature/your-branch-name --title "Feature: Implement X" --body "Details..."` (Title/body MUST be descriptive).
        - POST-PR: AWAIT PR review/merge by user/automation. DO NOT assume immediate merge.
        - BRANCH STATE: AI MUST remain on feature/fix branch after push & PR creation, until PR merged/closed, OR explicitly told to switch by user.
